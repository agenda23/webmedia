#!/bin/bash

# SQLiteマイグレーションスクリプト

echo "SQLiteデータベースのマイグレーションを開始します..."

# データディレクトリとデータベースファイルの初期化
echo "データディレクトリとデータベースファイルを初期化しています..."
bash /app/scripts/init-sqlite.sh
if [ $? -ne 0 ]; then
  echo "警告: データディレクトリとデータベースファイルの初期化中にエラーが発生しました。"
fi

# スキーマ確認
echo "スキーマファイルを確認しています..."
if ! grep -q "provider *= *\"sqlite\"" prisma/schema.prisma; then
  echo "SQLite以外のプロバイダが検出されました。スキーマを更新します..."
  bash /app/scripts/update-schema.sh
else
  echo "スキーマファイルは既にSQLiteプロバイダを使用しています。"
fi

# システム情報の確認
echo "システム情報を確認しています..."
echo "実行ユーザー: $(whoami)"
echo "実行プロセス: $(ps -p $$ -o comm=)"
echo "カレントディレクトリ: $(pwd)"
echo "ディスクスペース: $(df -h /data | tail -n 1)"

# 環境変数の確認
echo "環境変数を確認しています..."
echo "DATABASE_PROVIDER: $DATABASE_PROVIDER"
echo "DATABASE_URL: ${DATABASE_URL:0:30}..."

# Prismaの設定を更新
echo "Prismaの設定を更新しています..."
npx prisma generate
if [ $? -ne 0 ]; then
  echo "エラー: Prisma Clientの生成に失敗しました。"
  exit 1
fi

# データベース接続のテスト
echo "データベース接続をテストしています..."
mkdir -p prisma/migrations/0_init
echo "-- This is an empty migration" > prisma/migrations/0_init/migration.sql
touch prisma/migrations/migration_lock.toml
echo '# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "sqlite"' > prisma/migrations/migration_lock.toml

npx prisma migrate resolve --applied 0_init

if [ $? -ne 0 ]; then
  echo "データベース接続に失敗しました！"
  echo "DATABASE_URL が正しく設定されているか確認してください"
  echo "接続先: $DATABASE_URL"
  exit 1
else
  echo "データベース接続に成功しました。"
fi

# マイグレーションの実行
echo "データベースマイグレーションを実行しています..."
# migrate dev をスキップして、直接 deploy を実行（時間短縮のため）
echo "既存のマイグレーションを適用します..."

npx prisma migrate deploy
if [ $? -ne 0 ]; then
  echo "エラー: マイグレーションの実行に失敗しました。"
  exit 1
fi

echo "マイグレーション処理が完了しました。"